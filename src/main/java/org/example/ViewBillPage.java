package org.example;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableRow;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDType1Font;

import java.awt.Desktop;
import java.io.File;
import java.io.IOException;

public class ViewBillPage extends Application {

    @Override
    public void start(Stage primaryStage) {
        // TableView to display bill details
        TableView<Bill> tableView = new TableView<>();

        // Define columns
        TableColumn<Bill, String> billIdColumn = new TableColumn<>("Bill ID");
        billIdColumn.setCellValueFactory(new PropertyValueFactory<>("billId"));

        TableColumn<Bill, String> dateColumn = new TableColumn<>("Date");
        dateColumn.setCellValueFactory(new PropertyValueFactory<>("date"));

        TableColumn<Bill, Double> totalPaidColumn = new TableColumn<>("Total Paid");
        totalPaidColumn.setCellValueFactory(new PropertyValueFactory<>("totalPaid"));

        TableColumn<Bill, String> generatedByColumn = new TableColumn<>("Generated By");
        generatedByColumn.setCellValueFactory(new PropertyValueFactory<>("generatedBy"));

        // Bind column widths to the TableView width
        tableView.widthProperty().addListener((obs, oldWidth, newWidth) -> {
            double totalWidth = newWidth.doubleValue();
            billIdColumn.setPrefWidth(totalWidth * 0.25); // 25% of total width
            dateColumn.setPrefWidth(totalWidth * 0.25);   // 25% of total width
            totalPaidColumn.setPrefWidth(totalWidth * 0.25); // 25% of total width
            generatedByColumn.setPrefWidth(totalWidth * 0.25); // 25% of total width
        });

        // Add columns to the table
        tableView.getColumns().addAll(billIdColumn, dateColumn, totalPaidColumn, generatedByColumn);

        // Add sample data
        tableView.getItems().addAll(
                new Bill("Bill-23457485147900", "04-02-2023", 2002.0, "usertest"),
                new Bill("Bill-23542197260600", "04-02-2023", 3001.0, "usertest"),
                new Bill("Bill-24857018379500", "04-02-2023", 12012.0, "usertest")
        );

        // Add row click event to generate PDF
        tableView.setRowFactory(tv -> {
            TableRow<Bill> row = new TableRow<>();
            row.setOnMouseClicked(event -> {
                if (!row.isEmpty() && event.getClickCount() == 1) {
                    Bill selectedBill = row.getItem();
                    try {
                        generatePDF(selectedBill);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            });
            return row;
        });


        // Logout and Exit buttons
        Button logoutButton = new Button("Logout");
        Button exitButton = new Button("Exit");

        // Add functionality to the Exit button
        exitButton.setOnAction(event -> {
            PharmacyDashBoard dashboard = new PharmacyDashBoard();
            try {
                dashboard.start(primaryStage); // Return to the dashboard
            } catch (Exception e) {
                e.printStackTrace();
            }
        });

        // Button container
        HBox buttonBox = new HBox(20, logoutButton, exitButton);
        buttonBox.setAlignment(Pos.CENTER);
        buttonBox.setPadding(new Insets(20));

        // Layout setup
        BorderPane root = new BorderPane();
        root.setCenter(tableView);
        root.setBottom(buttonBox);
        root.setPadding(new Insets(20));

        // Scene and Stage
        Scene scene = new Scene(root, 800, 600);
        primaryStage.setTitle("View Bill");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    // Method to generate a PDF for a bill
    private void generatePDF(Bill bill) throws IOException {
        // Create a new PDF document
        PDDocument document = new PDDocument();
        PDPage page = new PDPage();
        document.addPage(page);

        try (PDPageContentStream contentStream = new PDPageContentStream(document, page)) {
            // Set font and begin text
            contentStream.setFont(PDType1Font.HELVETICA, 12);
            contentStream.beginText();
            contentStream.setLeading(14.5f);
            contentStream.newLineAtOffset(50, 750);

            // Add content to the PDF
            contentStream.showText("Bill Summary");
            contentStream.newLine();
            contentStream.showText("---------------");
            contentStream.newLine();
            contentStream.showText("Bill ID: " + bill.getBillId());
            contentStream.newLine();
            contentStream.showText("Date: " + bill.getDate());
            contentStream.newLine();
            contentStream.showText("Total Paid: " + bill.getTotalPaid());
            contentStream.newLine();
            contentStream.showText("Generated By: " + bill.getGeneratedBy());
            contentStream.newLine();

            // End text
            contentStream.endText();
        }

        // Save the PDF document
        String fileName = bill.getBillId() + ".pdf";
        document.save(fileName);
        document.close();

        System.out.println("PDF generated: " + fileName);

        // Open the PDF using the default desktop application
        openPDF(fileName);
    }

    // Method to open the generated PDF in the default PDF viewer
    private void openPDF(String fileName) {
        try {
            File file = new File(fileName);
            if (file.exists()) {
                Desktop desktop = Desktop.getDesktop();
                desktop.open(file);
            } else {
                System.out.println("PDF file not found: " + fileName);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    // Bill class for holding data
    public static class Bill {
        private String billId;
        private String date;
        private double totalPaid;
        private String generatedBy;

        public Bill(String billId, String date, double totalPaid, String generatedBy) {
            this.billId = billId;
            this.date = date;
            this.totalPaid = totalPaid;
            this.generatedBy = generatedBy;
        }

        public String getBillId() {
            return billId;
        }

        public String getDate() {
            return date;
        }

        public double getTotalPaid() {
            return totalPaid;
        }

        public String getGeneratedBy() {
            return generatedBy;
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}